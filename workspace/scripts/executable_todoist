#! /usr/bin/zsh

fetch_daily_tasks ()
{
    tasks=$(curl -X GET \
        "https://api.todoist.com/rest/v2/tasks?filter=today"\
        -H "Authorization: Bearer $TODOIST_API_KEY")

            echo "$tasks" | jq -c '.[] | {id: .id, content: .content, due: .due, duration: .duration}'
        }

close_task() {
    task_id=$1
    response=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
        -H "Authorization: Bearer $TODOIST_API_KEY" \
        "https://api.todoist.com/rest/v2/tasks/$task_id/close")

    # Check the response code
    if [[ "$response" -eq 204 ]]; then
        echo "Task $task_id successfully closed."
    else
        echo "Failed to close task $task_id. HTTP status: $response"
    fi
}

write_tasks_today_note (){
    today=$(date +"%d-%m-%Y")
    tomorrow=$(date -d "tomorrow" +"%d-%m-%Y")
    yesterday=$(date -d "yesterday" +"%d-%m-%Y")
    file="${VAULT}Journal/$today.md"

    awk '/## Daily Deeds & Rituals/ {print; exit} {print}' "$file" > temp.txt && mv temp.txt "$file"

    if [ -f "$file" ]; then
        echo "" >> "$file"
    fetch_daily_tasks | while read -r task; do
            # Extract the task content and due time using jq
            task_id=$(echo "$task" | jq -r '.id')
            task_datetime=$(echo "$task" | jq -r '.due.datetime // empty')
            task_content=$(echo "$task" | jq -r '.content')
            task_duration=$(echo "$task" | jq -r '.duration.amount // empty')

            task_output="- [ ] id: $task_id, content: $task_content"

            if [[ -n "$task_datetime" ]]; then
                formatted_datetime=$(date -d "$task_datetime" +"%H:%M")
                task_output="${task_output} - $formatted_datetime"
            fi
            
            if [[ -n "$task_duration" ]]; then
            task_output="${task_output} - $task_duration min"
            fi

            echo "$task_output" >> "$file"
        done

        echo "Tasks written to $file"
    fi
}

get_daily_tasks ()
{
    fetch_daily_tasks | while read -r task; do
            # Extract the task content and due time using jq
            task_id=$(echo "$task" | jq -r '.id')
            task_datetime=$(echo "$task" | jq -r '.due.datetime // empty')
            task_content=$(echo "$task" | jq -r '.content')
            task_duration=$(echo "$task" | jq -r '.duration.amount // empty')

            task_output="id: $task_id, content: $task_content"

            if [[ -n "$task_datetime" ]]; then
                formatted_datetime=$(date -d "$task_datetime" +"%H:%M")
                task_output="${task_output} - $formatted_datetime"
            fi
            
            if [[ -n "$task_duration" ]]; then
            task_output="${task_output} - ${task_duration}min"
            fi

            echo "$task_output"
        done
}

add_task_to_todoist () {
    echo -n "Enter the task content: "
    read -r content
    echo -n "Enter the task duration in minutes: "
    read -r duration
    echo -n "Enter the task due date (tomorrow at 12:00): "
    read -r due_string

    body=$(printf '{"content": "%s", "duration": %s, "duration_unit": "minute", "due_string": "%s", "due_lang": "en", "priority": 4}' \
        "$content" "$duration" "$due_string")

    echo "Generated JSON Payload: $body"  # Debugging line   echo $body
    if [[ -n "$content" ]]; then
        response=$(curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TODOIST_API_KEY" \
            -H "X-Request-Id: $(uuidgen)" \
            --data "$body"\
                        "https://api.todoist.com/rest/v2/tasks")

        # Check the response code
        if echo "$response" | jq -e . >/dev/null 2>&1; then
            echo "Task successfully added."
        else
            echo "Failed to add task. HTTP status: $response"
        fi
    else
        echo "No task content provided. Operation canceled."
    fi

}

if [ "$#" -eq 0 ]; then
    refresh_tasks_to_obsidian
else
    case "$1" in
        "sync")
            write_tasks_today_note
            ;;
        "resync")
            refresh_tasks_to_obsidian 
            ;;
        "refresh")
            refresh_tasks_to_obsidian 
            ;;
        "add")
            add_task_to_todoist 
            ;;
        "delete")
            read -r id -p "Enter the task id to delete: "
            delete_task_from_todoist $id 
            ;;
        "get")
            get_daily_tasks
            ;;
        "close")
            echo -n "Enter the task ID to close: "
            read -r id

            if [[ -n "$id" ]]; then
                close_task "$id"  # Call the function with the ID as an argument
            else
                echo "No task ID provided. Operation canceled."
            fi
            ;;
        *) echo "No valid flag provided"
            ;;
    esac

fi

